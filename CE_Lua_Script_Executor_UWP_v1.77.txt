--These will need to be updated to work
local DownloadCompiler = true--Download Epix's Compiler. Set to false if you don't wanna download exe files. You can't use rloadstring with Cheat Engine without it.
local TaskSchedulerAddress = 'Windows10Universal.exe+332B8D4'
local SetParentAddress = 'Windows10Universal.exe+3DAA40'
local SetNameAddress = 'Windows10Universal.exe+1450DE7'
local TextBoxCharacterLimit = 'Windows10Universal.exe+2D22F4C'
local CreateInstanceByNameFunctionAddress = 'Windows10Universal.exe+3D60A0'
local StringDataRegion = 'Windows10Universal.exe+2F87BFC'
local LuaVMLoadFunctionAddress = 'Windows10Universal.exe+55D430'--Thanks to YT (UserId: 1073140472639406080) for spoon feeding me the addresses and teaching how to find them LOL
local GetStateFunctionAddress = 'Windows10Universal.exe+454B20'
local Task_Defer_FunctionAddress = 'Windows10Universal.exe+49A010'
local Lua_Top = 0x14
local Name_Offset = 0x2C
local Character_Offset = 0x84
local RobloxExtraSpace_Offset = 0x48
local Identity_Offset = 0x18

--Optional, would only be needed if you are using CE Lua to play with FogEnd
local FogEnd_Offset = 0xF8



function xyzSpawnThread(functionZ,keep)
local CreatedThread
CreatedThread = createThread(function(Thread)
functionZ()
if keep == false then
CreatedThread.terminate()
end
end)
return CreatedThread
end

function table.find(tableA,comparedValue)
local x=tableA
local y=comparedValue
for i=1,#x do
if x[i]==y then
return i
end
end
end

function table.rid(tableA,comparedValue)
local x=tableA
local y=comparedValue
while table.find(x,y) do
for i=1,#x do
if x[i]==y then
table.remove(x,i)
end
end
end
end

function table.merge(Table1,Table2,AllowDuplicates)
local x = Table1
local y = Table2
for i,v in pairs(y) do
if AllowDuplicates then
x[#x+1] = v
else
if not table.find(x,v) then
x[#x+1] = v
end
end
end
return x
end

function table.foreach(tableA,functionZ)
local x=tableA
for i=1,#x do
functionZ(x[i])
end
end

function yieldForHookA(baseaddress)
local x=getAddressList().createMemoryRecord()
local y=baseaddress
local z=tonumber(x.Value)
x.setAddress(y)
x.Description=tostring(y).." Yielder"
print("Yielding Hook "..tostring(y))
repeat z=readBytes(x.Address) Sleep(1) until z~=nil and z~=0
print("Done Yielding "..tostring(y))
x.destroy()
end

function createMemoryRecord(desc,type,parent)
local NewMemoryRecord = getAddressList().createMemoryRecord()
NewMemoryRecord.Description = tostring(desc)
if type ~= nil then
NewMemoryRecord.Type = type
end
if parent ~= nil then
NewMemoryRecord.appendToEntry(parent)
end
return NewMemoryRecord
end

function createAutoAssembler(desc,source,active,parent)
local AutoAssemblerInstance = createMemoryRecord(tostring(desc),vtAutoAssembler,nil)
AutoAssemblerInstance.Script = source
AutoAssemblerInstance.Active = active
if parent ~= nil then
AutoAssemblerInstance.appendToEntry(parent)
end
return AutoAssemblerInstance
end

function createAddress(desc,addr,type,parent)
local Address = createMemoryRecord(tostring(desc),type,parent)
Address.setAddress(addr)
if type ~= nil then
Address.Type = type
end
if parent ~= nil then
Address.appendToEntry(parent)
end
return Address
end

function createGroup(desc,parent)
local NewGroup = createMemoryRecord(tostring(desc),nil,parent)
NewGroup.isGroupHeader = true
NewGroup.options = "[moHideChildren, moAllowManualCollapseAndExpand]"
NewGroup.Active = false
if parent ~= nil then
NewGroup.appendToEntry(parent)
end
return NewGroup
end

function getABD(des,warnr)
if getAddressList().getMemoryRecordByDescription(tostring(des)) ~= nil then
return getAddressList().getMemoryRecordByDescription(tostring(des))
else
if warnr==true then
print("WARNING: No such address found for description: "..tostring(des))
end
return false
end
end

function getChildren(group,Fun)
assert(type(Fun) == "function")
for i=0,group.Count-1 do
Fun(group.Child[i])
end
end

function d2h(src,bitwide)
   if type(src)~="number" then
if type(src)=="string" then
return src
end
      print("Warning!: Input isn't a number: "..tostring(src))
      return src
   end
   bitwide=bitwide or 0xffffffff
   return(string.format("%X",bAnd(tonumber(src),bitwide)))
end

function h2d(src)
   if type(src)~="string" then
if type(src)=="number" then
return src
end
      print("Warning!: Input isn't a string: "..tostring(src))
      return src
   end
   return tonumber(tostring(src), 16)
end


function isEven(Number)
if (Number % 2 == 0) then
return true
else
return false
end
end

function isOdd(Number)
if (Number % 2 ~= 0) then
return true
else
return false
end
end

function getProcessNameFromID(processId)
  local processName = nil
  local list = createStringlist()
  getProcesslist(list)
  for i = 0, list.Count-1 do
    local id, name = list.String[i]:match("(.*)-(.*)")
    if processId == tonumber(id, 16) then
      processName = name
      break
    end
  end
  return processName
end

function getProcessIDsWithName(ProcessName)
  local list = createStringlist()
  local matched = {}
  getProcesslist(list)
  for i = 0, list.Count-1 do
    local id, name = list.String[i]:match("(.*)-(.*)")
    if ProcessName == name then
      table.insert(matched,tonumber(id, 16))
    end
  end
  return matched
end

local PR_id = getOpenedProcessID()
local PR_name = getProcessNameFromID(PR_id)
local pid
local base
function getRBase()
return base
end
if PR_name ~= nil and PR_name == "Windows10Universal.exe" then
print("Using current Roblox client that is attached")
pid = PR_id
base = getAddress(enumModules(pid)[1].Name);
else
print("Attempting to attach to a Roblox client")
local RobloxProcesses = getProcessIDsWithName("Windows10Universal.exe");
pid = RobloxProcesses[1]
if pid == nil then
local errorM=[[Unable to find Microsoft Store Roblox. Open Roblox from the Microsoft Store first and then execute the script.]]
print(errorM)
speak(errorM)
return
end
openProcess(pid);
base = getAddress(enumModules(pid)[1].Name);
end

print("Successfully attached to Roblox!")



function ccXL(hexString,AllowOdd)--Ensures equal length hex string
local x = hexString:gsub('0x',''):gsub(' ','')
if not AllowOdd then
if isOdd(x:len()) then
x = '0'..x
end
end
return x
end

function LEX_AD(hexString)--Little Endian hex string, reverse op codes
local x = ccXL(hexString)
local y = {}
local z = ""
for i = 1, x:len(),2 do
table.insert(y,x:sub(i,i+1))
end
for i = #y, 1, -1 do
z = z..y[i]
end
return z
end

function gethexc(hexString)
local count = 0
if hexString == nil then
return 0
end
for i = 1, hexString:len(),2 do
count = count + 1
end
return count
end

function CalcJmp(Dst,Cur)
local x = (h2d(Dst) - h2d(Cur)) - 5
return d2h(x)
end

function GetStartOfFunction(FunctionRegionAddress)
local x = getAddress(FunctionRegionAddress)
local y = 0
for i=1,3000 do
x = x - 1
if select(2,splitDisassembledString(disassemble(getAddress(x)))) == 'push ebp' and select(2,splitDisassembledString(disassemble(getAddress(x+1)))) == 'mov ebp,esp' then
return x
end
end
end

function ByteTableToHexString(ByteTable)
local HexTable = {}
if ByteTable == nil then
return {}
end
if #ByteTable == 0 then
return {}
end
for i=1,#ByteTable do
table.insert(HexTable,ccXL(d2h(ByteTable[i])))
end
local HexString = ''
for i=1,#HexTable do
HexString = HexString..HexTable[i]
end
return HexString
end

function HexStringToNumberTable(hexString)
local x = ccXL(hexString,true)
local y = {}
for i = 1, x:len(),2 do
table.insert(y,h2d(x:sub(i,i+1)))
end
return y
end

function FwriteBytes(Address,ByteTable)
local x = getAddress(Address)
for i=1,#ByteTable do
writeBytes(x,ByteTable[i])
x = x + 1
end
end

function isAddressPointer(Address)
if not readInteger(Address) then
return false
end
local AddressPointed = readInteger(readInteger(getAddress(Address)))
if AddressPointed == nil then
return false
else
return true
end
end

function DRP(Pointer)
return readPointer(getAddress(Pointer))
end

function stringHexArray(stringCC)
local stringHexed = ''
for i=1,string.len(stringCC) do
local Hex = d2h(string.byte(string.sub(stringCC,i,i)))
if string.len(Hex) == 1 then
Hex = '0'..Hex
end
stringHexed = stringHexed..Hex
end
return stringHexed
end

function hexArrayString(hexArrayCC)
local stringRaw = ''
for i=1,string.len(hexArrayCC),2 do
local Char = string.char(h2d(string.sub(hexArrayCC,i,i+1)))
stringRaw = stringRaw..Char
end
return stringRaw
end

function ReadRobloxString(ExpectedAddress)
local StringCount = readInteger(ExpectedAddress + 0x10)
if StringCount > 15 then
return readString(DRP(ExpectedAddress),StringCount)
end
return readString(ExpectedAddress,StringCount)
end


function isValidTask(TaskInstanceAddress)
local x = TaskInstanceAddress
if isAddressPointer(x) == false then
return false
end
local y = DRP(x)
local a = y
local b = a + 0x8
local c = a + 0xC
if DRP(b) == a and isAddressPointer(a) and isAddressPointer(b) and isAddressPointer(c) then
return true
end
return false
end

function GetTaskName(TaskInstanceAddress)
local x = TaskInstanceAddress
if isValidTask(x) == false then
return false
end
local y = DRP(x)
local z = y + 0x10
return ReadRobloxString(z)
end

function TaskSchedulerGetJobs()
local DynamicTaskScheduler = DRP(GetTaskScheduler())
local JobStart = 0x134
local JobEnd = 0x138
local OffsetsPerJob = 8
local Count = 0
local CurrentJob = DRP(DynamicTaskScheduler + JobStart)
local JobEndAddress = DRP(DynamicTaskScheduler + JobEnd)
local Jobs = {}

while true do
if Count > 1000 then
print("Count too big in TaskSchedulerGetJobs! Breaking...")
break
end
if CurrentJob == JobEndAddress then
break
end
table.insert(Jobs,CurrentJob)
CurrentJob = CurrentJob + 8
Count = Count + 1
end

return Jobs
end

function TaskSchedulerFindFirstJob(JobName)
local Jobs = TaskSchedulerGetJobs()
for i=1,#Jobs do
if GetTaskName(Jobs[i]) == JobName then
return Jobs[i]
end
end
end



function GetFPS()
return 1/readDouble(DRP(TaskSchedulerAddress)+0x118)
end


function SetFPS(Count)
writeDouble(DRP(TaskSchedulerAddress)+0x118,1/tonumber(Count))
end


function GetTaskScheduler()
return TaskSchedulerAddress
end



function isTaskSchedulerAddress(Address,isDynamic)
local CurrentAddress = getAddress(Address)
if isAddressPointer(CurrentAddress) or isDynamic == true then
local TaskScheduler = CurrentAddress
local DynamicTaskScheduler
if isDynamic then
DynamicTaskScheduler = CurrentAddress
else
DynamicTaskScheduler = DRP(TaskScheduler)
end
local ChildrenStart = DynamicTaskScheduler + 0x134
local LastChild = DynamicTaskScheduler + 0x138
local PointerX = DynamicTaskScheduler + 0x130
local PointerY = DynamicTaskScheduler + 0x13C
if isAddressPointer(ChildrenStart) and isAddressPointer(LastChild) and isAddressPointer(PointerX) and isAddressPointer(PointerY) then
local FirstChild = DRP(DynamicTaskScheduler + 0x134)
if isAddressPointer(FirstChild) then
if DRP(DRP(FirstChild) + 0x8) == DRP(FirstChild) then
if readDouble(DynamicTaskScheduler + 0x8) == 0.05 then
return true
end
end
end
end
end
return false
end


if not isTaskSchedulerAddress(GetTaskScheduler()) then
local x = 'Task Scheduler Address is not valid. This means that Roblox has updated and you are using an outdated script. Or, it means that you are not using the latest version of Roblox. Seek help!'
speak(x)
assert(false,x)
end



function GetDataModelFromNetPeerSend()
local NPS = TaskSchedulerFindFirstJob("Net Peer Send")
if not NPS then
speak('Unable to load Exploit because not in a game. Join a Roblox game first and then execute the script.')
assert(false,'Unable to load Exploit because not in a game. Join a Roblox game first and then execute the script.')
end
return DRP(DRP(NPS) + 0x28) - 8
end


local DataModel = GetDataModelFromNetPeerSend()

local ClassName_Offset = 0xC

function GetDataModelAddress()
return getAddress(readInteger(getAddress(DataModel) + 0x14))
end

function GetDataModel()
return DRP(getAddress(DataModel) + 0x14) + 4
end

function GetDataModelFromRawDataModel(RawDataModel)
return getAddress(readInteger(getAddress(RawDataModel) + 0x14)) + 4
end

function CreateRobloxStringAddress(StringToWrite)
local LengthOfString = string.len(StringToWrite)
local NewMemoryRegion = allocateMemory(LengthOfString + 0x50)
local StringAddressLocation = NewMemoryRegion
local StringCountAddress = StringAddressLocation + 0x10
if LengthOfString > 15 then
writeInteger(StringAddressLocation,StringAddressLocation + 0x30)
writeString(StringAddressLocation + 0x30,StringToWrite)
writeInteger(StringCountAddress,LengthOfString)
writeInteger(StringCountAddress + 4,31)
else
writeString(StringAddressLocation,StringToWrite)
writeInteger(StringCountAddress,LengthOfString)
writeInteger(StringCountAddress + 4,15)
end
return NewMemoryRegion
end



local Children_Offset = Name_Offset + 0x4
local Parent_Offset = Children_Offset + 0x8



function GetDataModelDataAddress()
return DRP(getAddress(readInteger(h2d(DataModelAddress) + 0x3C) + 0x0))
end

function GetDataModelServices()
local TableOfServices = {}
local ServiceOffsetApart = 0x8
local CurrentService = 0x0
local DataModelDataAddress = DRP(DRP(GetDataModelAddress() + Children_Offset))
local LoopedTimes = 0
while true do
if LoopedTimes > 100 then
break
end
if isAddressPointer(getAddress(DataModelDataAddress) + CurrentService) == false then
break
end
if isInstanceValid(getAddress(DataModelDataAddress) + CurrentService) == false then
break
end
if isAddressPointer(getAddress(DataModelDataAddress) + CurrentService) == false or CurrentService > 0x2FF then
break
end
if isInstanceValid(getAddress(DataModelDataAddress) + CurrentService) == true then
table.insert(TableOfServices,getAddress(DataModelDataAddress) + CurrentService)
end
CurrentService = CurrentService + ServiceOffsetApart
LoopedTimes = LoopedTimes + 1
end
return TableOfServices
end


function GetName(Instance,isPointer)
if isPointer ~= false then
if isInstanceValid(Instance) == false then
return nil
end
local ExpectedAddress = DRP(DRP(Instance) + Name_Offset)
return ReadRobloxString(ExpectedAddress)
else
if not Instance then
return nil
end
if isInstanceValid(Instance + 0x4) == false then
return nil
end
local ExpectedAddress = DRP(Instance + Name_Offset)
return ReadRobloxString(ExpectedAddress)
end
end

function GetClassName(Instance,isPointer)
if isPointer ~= false then
if isInstanceValid(Instance) == false then
return nil
end
if isAddressPointer(readInteger(Instance)) == false then
return nil
end
if readInteger(readInteger(readInteger(getAddress(DRP(Instance) + ClassName_Offset)) + 4) + 0x14) == nil then
return nil
end
if readInteger(readInteger(readInteger(getAddress(DRP(Instance) + ClassName_Offset)) + 4) + 0x14) < 16 then
return readString(readInteger(readInteger(getAddress(DRP(Instance) + ClassName_Offset)) + 4))
else
return readString(DRP(readInteger(readInteger(getAddress(DRP(Instance) + ClassName_Offset)) + 4)))
end
else
if readInteger(readInteger(readInteger(getAddress(getAddress(Instance) + ClassName_Offset)) + 4) + 0x14) < 16 then
return readString(readInteger(readInteger(getAddress(getAddress(Instance) + ClassName_Offset)) + 4))
else
return readString(DRP(readInteger(readInteger(getAddress(getAddress(Instance) + ClassName_Offset)) + 4)))
end
end
end

function isInstanceValid(Instance)
if Instance == nil then
return false
end
if getAddress(Instance) == nil or getAddress(Instance) == 0 then
return false
end
if DRP(getAddress(Instance)) == nil or DRP(getAddress(Instance)) == 0 then
return false
end
if isAddressPointer(Instance) == false then
return false
end
if isAddressPointer(getAddress(DRP(Instance) + ClassName_Offset)) == false then
return false
end
if DRP(DRP(getAddress(Instance)) + 4) ~= DRP(getAddress(Instance)) then
return false
end
return true
end

function GetChildren(Instance)
local ChildrenInstances = {}
if isInstanceValid(Instance) == false then
print("Getting Children failed because not valid.")
return nil
end
local InstanceAddress = getAddress(Instance)
local ChildrenAddress = DRP(InstanceAddress) + Children_Offset
local ChildStartAddress = DRP(ChildrenAddress)
local ChildEndAddress = DRP(ChildStartAddress + 0x4)
local OffsetAddressPerChild = 0x8
local CurrentChildAddress = DRP(DRP(ChildrenAddress))
local LoopedTimes = 0
if readInteger(ChildrenAddress) == 0 or readInteger(ChildrenAddress) == nil then
return ChildrenInstances
end
while true do
if LoopedTimes > 9000 then
print("Too many Child, break called.")
break
end
if (getAddress(CurrentChildAddress) == ChildEndAddress) or (CurrentChildAddress > (CurrentChildAddress + 0x7FF)) then
break
end
if isInstanceValid(CurrentChildAddress) == true then
table.insert(ChildrenInstances,DRP(CurrentChildAddress) + 4)
end
CurrentChildAddress = CurrentChildAddress + OffsetAddressPerChild
LoopedTimes = LoopedTimes + 1
end
return ChildrenInstances

end


function GetDescendants(Instance)
local DescendantChildren = {}
local function LoopThroughChildren(InstanceChild)
local ChildrenInstances = GetChildren(InstanceChild)
if #ChildrenInstances > 0 then
for i=1,#ChildrenInstances do
if isInstanceValid(ChildrenInstances[i]) then
table.insert(DescendantChildren,ChildrenInstances[i])
LoopThroughChildren(ChildrenInstances[i])
end
end
end
end
LoopThroughChildren(Instance)
return DescendantChildren
end

function FindFirstDescendant(Instance,Name)
local Found
local function LoopThroughChildren(InstanceChild)
if Found then
return Found
end
local ChildrenInstances = GetChildren(InstanceChild)
if #ChildrenInstances > 0 then
for i=1,#ChildrenInstances do
if isInstanceValid(ChildrenInstances[i]) then
if GetName(ChildrenInstances[i]) == Name then
Found = ChildrenInstances[i]
return Found
else
LoopThroughChildren(ChildrenInstances[i])
end
end
end
end
end
LoopThroughChildren(Instance)
return Found
end

function FindFirstDescendantOfClass(Instance,ClassName)
local Found
local function LoopThroughChildren(InstanceChild)
if Found then
return Found
end
local ChildrenInstances = GetChildren(InstanceChild)
if #ChildrenInstances > 0 then
for i=1,#ChildrenInstances do
if isInstanceValid(ChildrenInstances[i]) then
if GetClassName(ChildrenInstances[i]) == ClassName then
Found = ChildrenInstances[i]
return Found
else
LoopThroughChildren(ChildrenInstances[i])
end
end
end
end
end
LoopThroughChildren(Instance)
return Found
end

function GetService(ServiceName)
local DataModel = GetDataModelAddress() + 4
local Children = GetChildren(DataModel)
for i=1,#Children do
if GetClassName(Children[i]) == ServiceName then
return Children[i]
end
end
end

function FindFirstChild(Instance,ChildName,Recursive)
local ChildrensOfInstance = GetChildren(getAddress(Instance))
local FirstChild = nil
for i=1,#ChildrensOfInstance do
if GetName(ChildrensOfInstance[i]) == ChildName then
FirstChild = ChildrensOfInstance[i]
return FirstChild
end
end
if FirstChild == nil and Recursive then
FirstChild = FindFirstDescendant(Instance,ChildName)
end
return FirstChild
end

function FindFirstChildOfClass(Instance,ClassName)
local ChildrensOfInstance = GetChildren(getAddress(Instance))
local FirstChild = nil
for i=1,#ChildrensOfInstance do
if GetClassName(ChildrensOfInstance[i]) == ClassName then
FirstChild = ChildrensOfInstance[i]
return FirstChild
end
end
return FirstChild

end

function GetFullName(Instance)
if Instance == GetDataModel() then
return GetName(GetDataModel())
end
local x = getAddress(Instance)
local y = GetParent(x)
local z = ""
local TableOfDir = {}
local LineName = ""
local currentParent = y
local Services = GetDataModelServices()
local LoopedTimes = 0
local IsDoneLoop = false
table.insert(TableOfDir,GetName(x))
while LoopedTimes < 100 or IsDoneLoop == true do
for i,v in pairs(Services) do
if GetName(currentParent,false) == GetName(v) then
table.insert(TableOfDir,GetName(v))
IsDoneLoop = true
break
end
end
if IsDoneLoop == true then
break
end
table.insert(TableOfDir,GetName(currentParent,false))
currentParent = GetParent(currentParent,false)
LoopedTimes = LoopedTimes + 1
end
for i = #TableOfDir, 1, -1 do
LineName = LineName.."."..TableOfDir[i]
end
LineName = LineName:sub(2,#LineName)
return 'game.'..LineName
end


function GetParent(Instance,isPointer)
if isPointer ~= false then
if isInstanceValid(Instance) == false then
return nil
end
return readInteger(DRP(Instance) + Parent_Offset)
else
return readInteger(getAddress(Instance) + Parent_Offset)
end
end

function GetLocalPlayer()
return FindFirstChildOfClass(GetService("Players"),"Player")
end

function GetPlayers()
local PlayerInstances = {}
local PlayersChildren = GetChildren(GetService("Players"))
for i,v in pairs(PlayersChildren) do
if GetClassName(v) == "Player" then
table.insert(PlayerInstances,v)
end
end
return PlayerInstances
end

function GetOtherPlayers()
local PlayerInstances = {}
local PlayersChildren = GetChildren(GetService("Players"))
for i,v in pairs(PlayersChildren) do
if GetClassName(v) == "Player" and GetName(v) ~= GetName(GetLocalPlayer()) then
table.insert(PlayerInstances,v)
end
end
return PlayerInstances
end

function GetPlayer(PlayerName)
local strl = tostring(PlayerName:lower())
for i,v in pairs(GetPlayers()) do
if GetName(v):lower()==strl or GetDisplayName(v):lower()==strl then
return v
end
if GetName(v):lower():sub(1, #strl) == strl or GetDisplayName(v):lower():sub(1, #strl) == strl then
return v
end
end
return nil
end

function GetCharacter(Instance)
return DRP(DRP(Instance) + Character_Offset) + 4
end


local RobloxStringDataTable = {}

function GetRobloxStringDataTable()
return RobloxStringDataTable
end

local CurrentAddress = getAddress(StringDataRegion)
for i=1,40000 do
if DRP(CurrentAddress) == 0 then
break
end
local x = DRP(CurrentAddress)
local y = ReadRobloxString(x)
if y then
table.insert(RobloxStringDataTable,y)
table.insert(RobloxStringDataTable,d2h(x))
else
print('Failed to grab String for: '..d2h(CurrentAddress))
end
CurrentAddress = CurrentAddress + 4
end


function GetRobloxStringAddress(Name)
local DataTable = GetRobloxStringDataTable()
for i=1,#DataTable do
if DataTable[i] == Name then
return DataTable[i+1]
end
end
return nil
end

function CreateInstanceByName(Name)
local AssemblyScript = ''
local StringAddress = GetRobloxStringAddress(Name)
if not StringAddress then
print("Unable to Create "..Name.." because unable to find String Address")
return nil
end
AssemblyScript = "alloc(RegionA,100)\nregistersymbol(RegionA)\ncreatethread(RegionA)\nRegionA:\n  push 3\nmov eax,RegionA\nadd eax,40\nmov ecx,eax\nmov edx,"..StringAddress.."\n  call "..d2h(getAddress(CreateInstanceByNameFunctionAddress)).."\nadd esp,4\nret"
if autoAssemble(AssemblyScript) then
sleep(1)
local RValue = readInteger(GetAddress('RegionA') + 0x40)
autoAssemble([[dealloc(RegionA)
unregistersymbol(RegionA)]])
return RValue
end
return nil
end






function IsA(Instance,ClassName)
local className = GetClassName(Instance)
if className == ClassName then
return true
end
end

function WaitForChild(Instance,Child,Timeout)
local timeOut = Timeout
local currentTime = 0
if timeOut == nil or type(timeOut) ~= "number" then
timeOut = 1
end
for i=1,1000*timeOut do
local found = FindFirstChild(Instance,Child)
if found then
return found
end
sleep(1)
end

end


function wait(time)
sleep(1000*time)
end


function PartCheck(Instance)
local ClassName = GetClassName(Instance)
if ClassName == "Part" or ClassName == "BasePart" or ClassName == "MeshPart" or ClassName == "UnionOperation" or ClassName == "Seat" then
return true
end
end


function GetHumanoid(Player)
local Character = GetCharacter(Player)
local Humanoid = FindFirstChildOfClass(Character,'Humanoid')
if Humanoid == nil then
return nil
end
return Humanoid
end


local Players_Service = GetService("Players")

local LocalPlayer = FindFirstChildOfClass(Players_Service,"Player")

local LocalPlayerName = GetName(LocalPlayer)

print("Welcome "..LocalPlayerName..", thanks for trying it out.")




function GetFogEnd()
local Lighting = GetService('Lighting')
local LightingRegion = DRP(Lighting)
local LightingFogEnd = LightingRegion + FogEnd_Offset
return readFloat(LightingFogEnd)
end

function SetFogEnd(Value)
local Lighting = GetService('Lighting')
local LightingRegion = DRP(Lighting)
local LightingFogEnd = LightingRegion + FogEnd_Offset
writeFloat(LightingFogEnd,Value)
end


function SetParent(InstanceToParent,ParentInstance)
local SetFunctionAddress = getAddress(SetParentAddress)
local InstanceAddress = DRP(InstanceToParent)
if not isInstanceValid(ParentInstance) then
print("Failed to Set Parent because invalid Parent Instance")
return nil
end
local AssemblerScript = "alloc(RegionA,100)\nregistersymbol(RegionA)\ncreatethread(RegionA)\nRegionA:\n  mov ecx,"..d2h(InstanceAddress).."\n  push "..d2h(DRP(ParentInstance)).."\n  call "..d2h(SetFunctionAddress).."\n  ret"
if autoAssemble(AssemblerScript) then
autoAssemble([[dealloc(RegionA)
unregistersymbol(RegionA)]])
return true
end
end

function SetName(Instance,Name)
if isInstanceValid(Instance) == false then
print("Setting Property Value failed because not valid.")
return nil
end
local SetFunctionAddress = getAddress(SetNameAddress)
local InstanceAddress = DRP(Instance)
local NewMemoryRegion = allocateMemory(0x100)
local LengthOfString = string.len(Name)
local StringAddressLocation = NewMemoryRegion + 0x40
local StringCountAddress = StringAddressLocation + 0x10
if LengthOfString > 15 then
writeInteger(StringAddressLocation,StringAddressLocation + 0x60)
writeString(StringAddressLocation + 0x60,Name)
writeInteger(StringCountAddress,LengthOfString)
writeInteger(StringCountAddress + 4,31)
else
writeString(StringAddressLocation,Name)
writeInteger(StringCountAddress,LengthOfString)
writeInteger(StringCountAddress + 4,15)
end
local AssemblerScript = "define(RegionA,"..d2h(NewMemoryRegion)..")\nregistersymbol(RegionA)\ncreatethread(RegionA)\nRegionA:\n  mov ecx,"..d2h(InstanceAddress).."\n  push "..d2h(StringAddressLocation).."\n  call "..d2h(SetFunctionAddress).."\n  mov [RegionA+30],eax\n  ret"
if autoAssemble(AssemblerScript) then
sleep(1)
autoAssemble([[dealloc(RegionA)
unregistersymbol(RegionA)]])
end
end


function CreateRobloxClass(Instance)--Credits to Epix#3333 (280100243343933441) for his help with metatables
if not isInstanceValid(Instance) then
return nil
end
local InstanceSelf = DRP(Instance) + 4
local ClassName = GetClassName(Instance)


local InstanceData = {
Refresh = function(self) return CreateRobloxClass(InstanceSelf) end,
Address = DRP(Instance),
Self = InstanceSelf,
GetName = function(self) if not RefreshDataModelF() then return nil end local CurrentName = GetName(InstanceSelf) self.Name = CurrentName return self.Name end,
ClassName = ClassName,
GetParent = function(self) local CurrentParent = GetParent(InstanceSelf) self.Parent = CurrentParent return self.Parent end,
SetParent = function(self,Instance) SetParent(InstanceSelf,Instance) end,
IsA = function(self,cLn) return IsA(InstanceSelf,cLn) end,
GetChildren = function(self)
local x = {}
local y = GetChildren(InstanceSelf)
for i,v in pairs(y) do
table.insert(x,CreateRobloxClass(v))
end
return x
end,
GetDescendants = function(self)
local x = {}
local y = GetDescendants(InstanceSelf)
for i,v in pairs(y) do
table.insert(x,CreateRobloxClass(v))
end
return x
end,
GetFullName = function(self) return GetFullName(InstanceSelf) end,
FindFirstChild = function(self,Child,Recursive,ToAddress) if not RefreshDataModelF() then return nil end if ToAddress then return FindFirstChild(InstanceSelf,Child,Recursive) else return CreateRobloxClass(FindFirstChild(InstanceSelf,Child,Recursive)) end end,
FindFirstChildOfClass = function(self,Child,ToAddress) if not RefreshDataModelF() then return nil end if ToAddress then return FindFirstChildOfClass(InstanceSelf,Child) else return CreateRobloxClass(FindFirstChildOfClass(InstanceSelf,Child)) end end,
FindFirstDescendant = function(self,Child,ToAddress) if not RefreshDataModelF() then return nil end if ToAddress then return FindFirstDescendant(InstanceSelf,Child) else return CreateRobloxClass(FindFirstDescendant(InstanceSelf,Child)) end end,
FindFirstDescendantOfClass = function(self,Child,ToAddress) if not RefreshDataModelF() then return nil end if ToAddress then return FindFirstDescendantOfClass(InstanceSelf,Child) else return CreateRobloxClass(FindFirstDescendantOfClass(InstanceSelf,Child)) end end,
WaitForChild = function(self,Child,Timeout) return CreateRobloxClass(WaitForChild(InstanceSelf,Child,Timeout)) end,


}

local InstanceMetaTable = {
__index = function(self,k)
if k == 'Name' then
return GetName(InstanceSelf)
end
if k == 'Parent' then
return CreateRobloxClass(GetParent(InstanceSelf) + 4)
end
if ClassName == "Players" then
if k == 'LocalPlayer' then
return CreateRobloxClass(GetLocalPlayer())
end


end

if ClassName == "Player" then
if k == 'Character' then
return CreateRobloxClass(GetCharacter(InstanceSelf))
end

end
if ClassName == "Lighting" then
if k == 'FogEnd' then
return GetFogEnd()
end
end





local FirstChild = FindFirstChild(InstanceSelf,k)
if FirstChild then
FirstChild = FindFirstChild(InstanceSelf,k)
return CreateRobloxClass(FirstChild)
end
FirstChild = FindFirstChildOfClass(InstanceSelf,k)
if FirstChild then
return CreateRobloxClass(FirstChild)
end
end,

__newindex = function(self,i,v)
if ClassName == "Lighting" then
if i == 'FogEnd' then
return SetFogEnd(v)
end
end
if i == 'Parent' then
assert(v.Self,'Unable to set Parent due to invalid Instance.')
return SetParent(InstanceSelf,v.Self)
end
end

}


if ClassName == "DataModel" then
InstanceData['GetService'] = function(self,ServiceName)
return CreateRobloxClass(GetService(ServiceName))
end
end
if ClassName == "Players" then
InstanceData['GetPlayers'] = function(self) local x = {} for i,v in pairs(GetPlayers()) do table.insert(x,CreateRobloxClass(v)) end return x end
end


setmetatable(InstanceData,InstanceMetaTable)

return InstanceData
end




Instance = {new = function(ClassName,Parent) if Parent and Parent.Self then local x = CreateRobloxClass(CreateInstanceByName(ClassName) + 4) x.Parent = Parent return x else return CreateRobloxClass(CreateInstanceByName(ClassName) + 4) end end}

game = CreateRobloxClass(GetDataModel())
workspace = game:GetService('Workspace')




--New Bytecode Executor Working!
--Big thanks to plusgiant5 (UserId: 666793068791595048) for giving good insights, advice, showing source code of their exploit, and being helpful!
--Many thanks to jayy/thedoomed/static (UserId: 960394917518127124) for inspiration with the first ever Cheat Engine Script Executor! The bytecode used is from jayy's old CE Script Executor!



if not CurrentRobloxProcessPID then
CurrentRobloxProcessPID = pid
end

if CurrentRobloxProcessPID ~= pid then
print("New Process, Set!")
CurrentRobloxProcessPID = pid
StoredByteCodes = {}
StoredOScripts = {}
IdentityAddress = nil
end


if not StoredByteCodes then
StoredByteCodes = {}
end

function GetStoredByteCode(HexStringByteCode)
local RawHexString = string.gsub(HexStringByteCode,' ','')
if table.find(StoredByteCodes,HexStringByteCode) then
for i=1,#StoredByteCodes do
if HexStringByteCode == StoredByteCodes[i] then
return StoredByteCodes[i+1]
end
end
end
end


function MakeByteCodeAddress(HexStringByteCode)
local RawHexString = string.gsub(HexStringByteCode,' ','')
local ByteCodeAddress = GetStoredByteCode(RawHexString)
if ByteCodeAddress then
return ByteCodeAddress
end
print("Making New Memory in MakeByteCodeAddress function")
ByteCodeAddress = allocateMemory(50)
local Length = gethexc(RawHexString)
local BytecodeString = allocateMemory((Length * 4) + 20)
writeInteger(ByteCodeAddress,BytecodeString)
writeInteger(ByteCodeAddress + 0x10,Length)
writeInteger(ByteCodeAddress + 0x14,Length+20)
FwriteBytes(BytecodeString,HexStringToNumberTable(RawHexString))
table.insert(StoredByteCodes,RawHexString)
table.insert(StoredByteCodes,ByteCodeAddress)
return ByteCodeAddress
end

function GetByteCodeAddress(Script)
local ClassName = GetClassName(Script)
if ClassName == 'LocalScript' then
local ProtectedStringRegion = DRP(DRP(Script) + 0x140)
return ProtectedStringRegion + 0x10
end
if ClassName == 'ModuleScript' then
local ProtectedStringRegion = DRP(DRP(Script) + 0x124)
return ProtectedStringRegion + 0x10
end
print("Unsupported Script at the moment for class: "..ClassName)
end

function GetByteCode(ByteCodeAddress)
local Length = readInteger(ByteCodeAddress + 0x10)
local ByteCode = ByteTableToHexString(readBytes(DRP(ByteCodeAddress),Length,true))
return ByteCode
end


if not StoredOScripts then
StoredOScripts = {}
end

function GetStoredOScripts(ByteCodeAddress)
if table.find(StoredOScripts,ByteCodeAddress) then
for i=1,#StoredOScripts do
if ByteCodeAddress == StoredOScripts[i] then
return StoredOScripts[i+1]
end
end
end
end

function OverwriteByteCode(LocalScript,ByteCodeAddress)
local x = DRP(LocalScript)
local y
local z
if GetClassName(LocalScript) == "LocalScript" then
y = x + 0x138
z = x + 0x140
end
if GetClassName(LocalScript) == "ModuleScript" then
y = x + 0x124
z = y
end
local ProtectedStringRegion = DRP(y)
local ProtectedStringRegionData = readBytes(ProtectedStringRegion,20,true)
local LSByteCodeAddress = ProtectedStringRegion + 0x10
local LengthA = LSByteCodeAddress + 0x10
local LengthB = LengthA + 4
local OriginalByteCode = GetByteCode(LSByteCodeAddress)
local NewMemoryRegion
if table.find(StoredOScripts,ProtectedStringRegion) then
NewMemoryRegion = ProtectedStringRegion
print("Memory Set, overwritting...")
end
NewMemoryRegion = GetStoredOScripts(ByteCodeAddress)
if NewMemoryRegion then
print("Setting Pointers...")
writeInteger(y,NewMemoryRegion)
writeInteger(z,NewMemoryRegion)
return {NewMemoryRegion,ProtectedStringRegion,OriginalByteCode}
end
if not NewMemoryRegion then
print("Making New Memory in OverwriteByteCode function")
NewMemoryRegion = allocateMemory(64)
table.insert(StoredOScripts,ByteCodeAddress)
table.insert(StoredOScripts,NewMemoryRegion)
end
FwriteBytes(NewMemoryRegion,ProtectedStringRegionData)
writeInteger(NewMemoryRegion + 0x10,readInteger(ByteCodeAddress))
writeInteger(NewMemoryRegion + 0x20,readInteger(ByteCodeAddress + 0x10))
writeInteger(NewMemoryRegion + 0x24,readInteger(ByteCodeAddress + 0x14))
writeInteger(y,NewMemoryRegion)
writeInteger(z,NewMemoryRegion)
return {NewMemoryRegion,ProtectedStringRegion,OriginalByteCode}
end



function GetScriptByteCode(Script)
local ClassName = GetClassName(Script)
if ClassName == 'LocalScript' then
return GetByteCode(GetByteCodeAddress(Script))
end
if ClassName == 'ModuleScript' then
return GetByteCode(GetByteCodeAddress(Script))
end
print("Unsupported Script at the moment for class: "..ClassName)
end




IsHookingLuaStateAlready = false
local HookLocation = getAddress(LuaVMLoadFunctionAddress) + 1
if readBytes(HookLocation,1) == 139 then
print("Setting up Hook")

if not IdentityAddress then
IdentityAddress = allocateMemory(4)
writeInteger(IdentityAddress,5)
end

function setthreadidentity(Identity)
writeInteger(IdentityAddress,Identity)
end

function getthreadidentity(Identity)
return readInteger(IdentityAddress)
end



function HookLuaState(ByteCodeAddress)
if IsHookingLuaStateAlready then
print("There's a hook already")
return nil
end
IsHookingLuaStateAlready = true
local HookNewMemoryRegion = allocateMemory(100)
local OriginalBytes = readBytes(HookLocation,5,true)
local ByteCodeStringAddress = DRP(ByteCodeAddress)
local returnLoc = HookLocation + 5
writeBytes(HookNewMemoryRegion,OriginalBytes)
local OpCodeHexString1 = '50 8B C2 8B 00'
local OpCodeHexString2 = '3D '..LEX_AD(d2h(ByteCodeStringAddress))
local OpCodeHexString3 = '58 0F85 '..LEX_AD(CalcJmp(returnLoc,HookNewMemoryRegion+gethexc(OpCodeHexString1..OpCodeHexString2)+4))
local OpCodeHexString4 = '89 0D '..LEX_AD(d2h(HookNewMemoryRegion+0x50))
local OpCodeHexString5 = '50 8B C1 83 C0 '..d2h(RobloxExtraSpace_Offset)..' 8B 00 83 C0 '..d2h(Identity_Offset)..' 53 8B 1D'..LEX_AD(d2h(IdentityAddress))..'89 18 5B 58'
local OpCodeHexString6 = 'E9 '..LEX_AD(CalcJmp(returnLoc,-8+HookNewMemoryRegion+gethexc(OpCodeHexString1..OpCodeHexString2..OpCodeHexString3..OpCodeHexString4..OpCodeHexString5)))
local FullCode = OpCodeHexString1..OpCodeHexString2..OpCodeHexString3..OpCodeHexString4..OpCodeHexString5..OpCodeHexString6
FwriteBytes(HookNewMemoryRegion+5,HexStringToNumberTable(FullCode))
FwriteBytes(HookLocation,HexStringToNumberTable('E9 '..LEX_AD(CalcJmp(HookNewMemoryRegion,HookLocation))))
local function resetHook()
if IsHookingLuaStateAlready then
FwriteBytes(HookLocation,OriginalBytes)
autoAssemble('dealloc('..d2h(HookNewMemoryRegion)..')')
IsHookingLuaStateAlready = false
end
end
return {HookNewMemoryRegion + 0x50,resetHook}
end

function YieldForLuaState(LuaStateHookData)
if not LuaStateHookData then
print("HookData is nil")
return nil
end
local LuaState
for i=1,10 do
LuaState = readInteger(LuaStateHookData[1])
if LuaState ~= 0 then
break
end
sleep(60)
end
if LuaState == 0 then
return nil
end
return LuaState
end

function GetIdentity(LuaState)
local SharedMemory = DRP(LuaState + RobloxExtraSpace_Offset)
local Identity = SharedMemory + Identity_Offset
return readInteger(Identity)
end

function SetIdentity(LuaState,Level)
local SharedMemory = DRP(LuaState + RobloxExtraSpace_Offset)
local Identity = SharedMemory + Identity_Offset
writeInteger(Identity,Level)
end


end




function RunScriptWithByteCode(HexStringByteCode,Identity,Parent)
local ScriptToRun = Instance.new("LocalScript")
local ByteCode1 = MakeByteCodeAddress(HexStringByteCode)
OverwriteByteCode(ScriptToRun.Self,ByteCode1)
if not Identity then
Identity = 6
end
setthreadidentity(Identity)
local LuaStateHookData = HookLuaState(ByteCode1)
if not Parent then
ScriptToRun.Parent = game:GetService('Players').LocalPlayer.PlayerGui
else
ScriptToRun.Parent = Parent
end
local LuaState = YieldForLuaState(LuaStateHookData)
SetIdentity(LuaState,Identity)
LuaStateHookData[2]()
return ScriptToRun
end


function CompileToRobloxByteCode(RobloxLuaStringSource)
local Source = RobloxLuaStringSource
local CompilerDIR = os.getenv('userprofile')..'\\Desktop\\rbxcompile.exe'
local InputFileDIR = os.getenv('userprofile')..'\\Desktop\\input.luau'
local OutputFileDIR = os.getenv('userprofile')..'\\Desktop\\output.encrbxluauc'
local Compiler=io.open(CompilerDIR,"r")
if Compiler then
Compiler:close()
else
if DownloadCompiler == false then
print("You don't have the compiler in Desktop. Try modifying it to your desired location or downloading it. Try setting DownloadCompiler at the top to true and try again.")
return nil
else
print("Downloading Epix's compiler...")
local CE_Internet=getInternet('Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Mobile Safari/537.36')
local CE_Internet_Data=CE_Internet.getURL("https://github.com/EpixScripts/rbxcompile/releases/download/v1.0.1/rbxcompile.exe")
CE_Internet.destroy()

local CompilerFileDownloaded=io.open(os.getenv('userprofile')..'\\Desktop\\rbxcompile.exe', "wb")
CompilerFileDownloaded:write(CE_Internet_Data)
CompilerFileDownloaded:close()
print("Done downloading the compiler! Default location is in Desktop.")
sleep(100)
end
end

local InputFile=io.open(InputFileDIR, "w")
InputFile:write(Source)
InputFile:close()
sleep(10)
os.execute('cd '..os.getenv('userprofile')..'\\Desktop &'..CompilerDIR)
sleep(10)
local OutputFile = io.open(OutputFileDIR, "rb")
if not OutputFile then
for i=1,20 do
OutputFile = io.open(OutputFileDIR, "rb")
if OutputFile then break end
sleep(100)
end
if not OutputFile then
print("Unable to find Output File!")
return nil
end
end
local RawCompiledByteCode = OutputFile:read "*a"
local HexCompiledByteCode = stringHexArray(RawCompiledByteCode)
return HexCompiledByteCode
end


function GetState()
local AssemblerScript = "alloc(RegionA,100)\nregistersymbol(RegionA)\ncreatethread(RegionA)\ndefine(ArgumentA,RegionA+40)\nRegionA:\nmov ecx,"..d2h(game:GetService("ScriptContext").Address).."\npush ArgumentA\npush ArgumentA".."\ncall "..d2h(getAddress(GetStateFunctionAddress)).."\nmov [RegionA+30],eax".."\nret"
if autoAssemble(AssemblerScript) then
sleep(1)
local Value = readInteger(GetAddress('RegionA') + 0x30)
autoAssemble([[dealloc(RegionA)
unregistersymbol(RegionA)]])
return Value
end
end

function LuaVMLoad(LuaState,ByteCodeAddress,ChunkName,Env_Optional)
local ChunkNameAddress = allocateMemory(string.len(ChunkName)+20)
if not Env_Optional then
Env_Optional = '0'
end
writeString(ChunkNameAddress,ChunkName)
local AssemblerScript = "alloc(RegionA,100)\nregistersymbol(RegionA)\ncreatethread(RegionA)\nRegionA:\nmov ecx,"..d2h(getAddress(LuaState)).."\nmov edx,"..d2h(getAddress(ByteCodeAddress)).."\npush "..tostring(Env_Optional).."\npush "..d2h(getAddress(ChunkNameAddress)).."\ncall "..d2h(getAddress(LuaVMLoadFunctionAddress)).."\nadd esp,8\nret"
if autoAssemble(AssemblerScript) then
sleep(1)
local Value = readInteger(GetAddress('RegionA') + 0x30)
autoAssemble([[dealloc(RegionA)
unregistersymbol(RegionA)]])
autoAssemble('dealloc('..d2h(ChunkNameAddress)..')')
return Value
end
end

function Task_Defer(LuaState)
local AssemblerScript = "alloc(RegionA,100)\nregistersymbol(RegionA)\ncreatethread(RegionA)\ndefine(ArgumentA,RegionA+40)\nRegionA:\npush "..d2h(getAddress(LuaState)).."\ncall "..d2h(getAddress(Task_Defer_FunctionAddress)).."\nadd esp,4\nmov [RegionA+30],eax".."\nret"
if autoAssemble(AssemblerScript) then
sleep(1)
local Value = readInteger(GetAddress('RegionA') + 0x30)
autoAssemble([[dealloc(RegionA)
unregistersymbol(RegionA)]])
return Value
end
end

function ByteCodeExecution(ScriptSource,Identity)
local LuaState = GetState()
local Original = readInteger(LuaState + Lua_Top)
local RobloxSourceToExecute = 'spawn(function() '..ScriptSource..' end)'
if not Identity then Identity = 6 end
SetIdentity(LuaState,Identity)
local HexStringDataOfByteCode = CompileToRobloxByteCode(RobloxSourceToExecute)
local ByteCodeAddress = MakeByteCodeAddress(HexStringDataOfByteCode)
sleep(1)
LuaVMLoad(LuaState,ByteCodeAddress,'=CE',0)
sleep(1)
Task_Defer(LuaState)
writeInteger(LuaState + Lua_Top,Original)
end

function ByteCodeExecutionRunByteCode(ByteCodeAddress,Identity)
local LuaState = GetState()
local Original = readInteger(LuaState + Lua_Top)
if not Identity then Identity = 6 end
SetIdentity(LuaState,Identity)
LuaVMLoad(LuaState,ByteCodeAddress,'=CE',0)
Task_Defer(LuaState)
writeInteger(LuaState + Lua_Top,Original)
end

function rloadstring(RobloxLuaStringSource,Identity,Method,Parent)--Thanks to Epix for lots of help! The compiler is compiled by Epix. (UserId: 280100243343933441)
if Method then
return RunScriptWithByteCode(CompileToRobloxByteCode(RobloxLuaStringSource),Identity,Parent)
end
ByteCodeExecution(RobloxLuaStringSource,Identity)
end



function GetFileName(f)
local str = f
local temp = ""
local result = ""
for i = str:len(), 1, -1 do
if str:sub(i,i) ~= "/"  then
temp = temp..str:sub(i,i)
else
break
end
end
for j = temp:len(), 1, -1 do
result = result..temp:sub(j,j)
end
return result
end

function getfile()
local load_dialog = createOpenDialog(self)
load_dialog.InitalDir = os.getenv('%USERPROFILE%')
load_dialog.execute()
local file = load_dialog.FileName
local fl = GetFileName(file)
if fl == nil then
print("No file to load.")
return file
else
local file2read = io.open(fl, "r")
if not file2read then
print("Decided not to open a file")
return nil
end
local content = file2read:read "*a"
file2read:close()
return content
end
end

function rloadfile()
local x = getfile()
if x then
rloadstring(x)
end
end

function rdofile(DIR)
local File = io.open(DIR, "r")
local FileContent = File:read "*a"
File:close()
rloadstring(FileContent)
end

function rloadstring_online(DirectLinkToScriptSource)
local CE_Internet=getInternet('Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Mobile Safari/537.36')
local CE_Internet_Data=CE_Internet.getURL(DirectLinkToScriptSource)
CE_Internet.destroy()
rloadstring(CE_Internet_Data)
end



sleep(1)
for i=1,4 do
writeInteger(getAddress(TextBoxCharacterLimit),999999999)
sleep(1)
end




ByteCodeExecutionRunByteCode(MakeByteCodeAddress



--[[--
To use the DataModel address, go to MemoryView > Tools > Dissect Data/Structure and paste in the address and then click Structures and Define new structure.
Amazing thanks to mogus#2891 (857370745088901161) for lots of help with reversing, getting me back into exploiting, and making this possible.

--]]--




